// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: SequentialCommandGroup.

package frc.robot.commands;

import edu.wpi.first.wpilibj2.command.*;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import frc.robot.subsystems.DriveTrain;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Twist extends SequentialCommandGroup {

    private static final double TWIST_SPEED = 0.75;
    private static final double TWIST_DURATION = 0.25; // seconds
    private static final double PAUSE_DURATION = 0.25; // seconds
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    public Twist(DriveTrain driveTrain) {

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        addCommands(
                spinLeft(TWIST_DURATION / 2.0, driveTrain),
                Commands.waitSeconds(PAUSE_DURATION),
                spinRight(TWIST_DURATION, driveTrain),
                Commands.waitSeconds(PAUSE_DURATION),
                spinLeft(TWIST_DURATION, driveTrain),
                Commands.waitSeconds(PAUSE_DURATION),
                spinRight(TWIST_DURATION / 2.0, driveTrain));
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }

    private Command spinLeft(double seconds, DriveTrain drivetrain) {
        return this.spin(-TWIST_SPEED, TWIST_SPEED, seconds, drivetrain);
    }

    private Command spinRight(double seconds, DriveTrain drivetrain) {
        return this.spin(TWIST_SPEED, -TWIST_SPEED, seconds, drivetrain);
    }

    private Command spin(double leftSpeed, double rightSpeed, double seconds, DriveTrain driveTrain) {
        return new TankDrive(leftSpeed, rightSpeed, driveTrain).withTimeout(seconds);
    }
}
